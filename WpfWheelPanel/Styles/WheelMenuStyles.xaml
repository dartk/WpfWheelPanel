<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:WpfWheelPanel.Controls">
    <SolidColorBrush x:Key="Menu.Static.Background" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="Menu.Static.Border" Color="#FF999999" />
    <SolidColorBrush x:Key="Menu.Static.Foreground" Color="#FF212121" />
    <SolidColorBrush x:Key="Menu.Static.Separator" Color="#FFD7D7D7" />
    <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF707070" />
    <SolidColorBrush x:Key="MenuItem.Selected.Background" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="MenuItem.Selected.Border" Color="#FF26A0DA" />
    <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="#FF26A0DA" />
    <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Background" Color="#0A000000" />
    <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Border" Color="#21000000" />

    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=ItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
                SnapsToDevicePixels="true"
                Background="{StaticResource Menu.Static.Background}"
                CornerRadius="4">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" />
                <ContentPresenter x:Name="Header"
                                  ContentSource="Header" Grid.Column="1"
                                  HorizontalAlignment="Center"
                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock x:Name="menuGestureText" Grid.Column="2"
                           Margin="{TemplateBinding Padding}" Opacity="0.7"
                           Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Header" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot"
                        Value="{StaticResource MenuItem.Highlight.Background}" />
                <Setter Property="BorderBrush" TargetName="templateRoot"
                        Value="{StaticResource MenuItem.Highlight.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot"
                        Value="{StaticResource Menu.Disabled.Foreground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot"
                        Value="{StaticResource MenuItem.Highlight.Disabled.Background}" />
                <Setter Property="BorderBrush" TargetName="templateRoot"
                        Value="{StaticResource MenuItem.Highlight.Disabled.Border}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=HeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
                Background="{StaticResource Menu.Static.Background}"
                CornerRadius="4">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center"
                                  Height="16" Margin="3"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center" Width="16" />
                <ContentPresenter ContentSource="Header" Grid.Column="1"
                                  HorizontalAlignment="Center"
                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                       Placement="Center"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       PlacementTarget="{Binding Path=., RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controls:WheelPanel}}}">
                    <Border x:Name="SubMenuBorder">
                        <controls:WheelPanel IsItemsHost="True"
                                            MinInnerRadius="{Binding OuterRadius, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controls:WheelPanel}}}" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot"
                        Value="{StaticResource MenuItem.Highlight.Background}" />
                <Setter Property="BorderBrush" TargetName="templateRoot"
                        Value="{StaticResource MenuItem.Highlight.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot"
                        Value="{StaticResource Menu.Disabled.Foreground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="WheelMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey ResourceId=ItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}" />
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=HeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                <Setter Property="Padding" Value="6,0" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Background" Value="{StaticResource Menu.Static.Background}" />
                <Setter Property="BorderBrush" Value="{StaticResource Menu.Static.Border}" />
                <Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}" />
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=ItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                <Setter Property="Padding" Value="6,0" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=HeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:WheelContextMenu}">
        <Setter Property="Placement" Value="MousePoint" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border">
                        <controls:WheelPanel IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="MenuItem" BasedOn="{StaticResource WheelMenuItemStyle}" />
        </Style.Resources>
    </Style>

</ResourceDictionary>